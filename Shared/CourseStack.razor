@page "/Course"
@using System.Text.Json;
@using System.Collections;
@using System.Collections.Generic;

<h3>CourseStack</h3>

@if (this.Initialized)
{
    <div style="height:100vh;overflow-y:scroll; border-radius: 20px; padding: 10px 10px 10px 10px; align-content: center; /*display: flex; flex-direction: row; flex-wrap: wrap*/">
        @* <MudPaper Class="d-flex align-content-center flex-wrap flex-grow-1 gap-4" Style="overflow-y: scroll;" MaxWidth="608px" Height="100vh" Elevation="0"> *@
        <Virtualize Items="CourseManager.Courses">
            <CourseItem Instance=@context Visible="true"></CourseItem>
        </Virtualize>
        @* </MudPaper> *@
    </div>
}
@code {
      public Course[] Courses { get; set; }

    public string Content;
    
    public async Task UpdateAsync()
    { 
        this.Courses = await CourseManager.FetchCourses();
    }

    public bool Initialized;
   
    public async ValueTask<ItemsProviderResult<Course>> GetCoures(ItemsProviderRequest request)
    {
        if (!this.Initialized)
            await this.OnInitializedAsync();
        
        return new ItemsProviderResult<Course>(this.Courses, this.Courses.Length);
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        if (CourseManager.Courses == null)
        {
            Console.WriteLine("Enter");
            this.Content = await (new HttpClient().GetStringAsync("http://localhost:5157/courses"));
            CourseManager.Courses =
                JsonSerializer.Deserialize<Course[]>(JsonSerializer.Deserialize<Hashtable>(this.Content)["Payload"]
                    .ToString());
            Console.WriteLine("Exit");
        }

        this.Initialized = true;
    }
} 
 
